# -*- coding: utf-8 -*-
"""Лавицкий лаба 6

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-Mq-gVvIztPSUGqmCVpUAbb6cxgaRBFh
"""

import matplotlib.pyplot as plt

celsius=[[-67.0],[-34.0],[0],[34.0],[54.0],[67.0],[100]]
farenheit=[[-88.6],[-29.2],[32.0],[93.2],[129.2],[152.6],[212.0]]

plt.figure(figsize=(15,8),dpi=50)
plt.scatter(celsius,farenheit,label='входные данные', color='green',marker='$f$')
plt.xlabel('celsius')
plt.ylabel('farenheit')
plt.legend()
plt.grid(True)
plt.show()

for c,f in zip(celsius,farenheit):
  print(f'цельсия{c}=фаренгейт{f}')

import sklearn.linear_model as lr
lr=LinearRegression()
lr.fit(celsius,farenheit)
lr.predict([[256],[123]])
lr.coef_
lr.intercept_
celsius_test=[[-50],[10],[30],[20],[10],[70],[87]]
farenheit_test=lr.predict(celsius_test)
farenheit_test

from sklearn.linear_model import LinearRegression
lr=LinearRegression()
lr.fit(celsius,farenheit)
lr.predict([[256],[123]])
lr.coef_
lr.intercept_
celsius_test=[[-50],[10],[30],[20],[10],[70],[87]]
farenheit_test=lr.predict(celsius_test)
farenheit_test

for c,f in zip(celsius_test,farenheit_test):
  print(f'цельсия{c},фаренгейта{f}')

import numpy as np
x_range=np.arange(-70,120)
y_range=x_range*1.8+32

plt.figure(figsize=(15,8), dpi=280)
plt.plot(x_range, y_range, label='уравнение', linewidth='1')
plt.scatter(celsius, farenheit, label='входные данные', color='green', marker='$f$')
plt.scatter(celsius_test, farenheit_test, label='предсказанное значение', color='blue')
plt.xlabel('Цельсия')
plt.ylabel('Фаренгейта')
plt.legend()
plt.grid(True)
plt.show()

celsius=[[-67.0],[-34.0],[0],[34.0],[54.0],[67.0],[100]]
kalvin=[[206.0],[239.0],[273.0],[307.0],[327.0],[340.0],[373.0]]

plt.scatter(celsius,kalvin,label='входные данные', color='green',marker='$f$')
plt.xlabel('celsius')
plt.ylabel('kalvin')
plt.legend()
plt.grid(True)
plt.show()

for c,k in zip(celsius,kalvin):
  print(f'цельсия{c}=кельвин{f}')

import sklearn.linear_model as lr
lr=LinearRegression()
lr.fit(celsius,kalvin)
lr.predict([[256],[123]])
lr.coef_
lr.intercept_
celsius_test=[[-100],[100],[-200],[-273],[10],[70],[87]]
kalvin_test=lr.predict(celsius_test)
kalvin_test

for c,k in zip(celsius,kalvin):
  print(f'цельсия{c}=кельвин{f}')

import sklearn.linear_model as lr
lr=LinearRegression()
lr.fit(celsius,kalvin)
lr.predict([[256],[123]])
lr.coef_
lr.intercept_
celsius_test=[[-100],[100],[-200],[-273],[10],[70],[87]]
kalvin_test=lr.predict(celsius_test)
kalvin_test

from sklearn.linear_model import LinearRegression
lr=LinearRegression()
lr.fit(celsius,kalvin)
lr.predict([[256],[123]])
lr.coef_
lr.intercept_
celsius_test=[[-50],[10],[30],[20],[10],[70],[87]]
kalvin_test=lr.predict(celsius_test)
kalvin_test

for c,f in zip(celsius_test,kalvin_test):
  print(f'цельсия{c},кельвина{f}')

import numpy as np
k_range=np.arange(-70,120)
c_range=k_range+273

plt.figure(figsize=(15,8), dpi=280)
plt.plot(k_range, c_range, label='уравнение', linewidth='1')
plt.scatter(celsius, kalvin, label='входные данные', color='green', marker='$f$')
plt.scatter(celsius_test, kalvin_test, label='предсказанное значение', color='blue')
plt.xlabel('Цельсия')
plt.ylabel('Кельвина')
plt.legend()
plt.grid(True)
plt.show()

!git clone https://github.com/r1zzzzzzza/-.-.--311

from math import*
print(pi)
print(e)
print(nan)
print(factorial(1))
print(gcd(1), gcd(128))